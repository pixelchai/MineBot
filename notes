Minecraft options:
- MineRL -- though the action space needs to be extended (crafting, etc)
- Malmo -- what MineRL is built on
- Minecraft mod of some sort (most likely Forge)
Other options which were discarded:
- Recreate minecraft -- too many details to create (Ender dragon etc)
- Analyse MC frame by frame -- although recreating the scene in 3D from screenshots and carrying out other related computer vision tasks would be interesting, it would likely end up becoming the focus of the project + taking up most of the time rather than beating the game. Maybe I could look into stuff like this as a separate project in the future

Decision after trying out the above options:
- MineRL: Uses malmo internally so probably would be better to use malmo directly rather than extending MineRL
          + does some other weird stuff like resizing the screen
          + builds every time like Malmo
- Malmo: Don't really like the vibe -- with the whole XML + client/server thing
         + rebuilds every time you wanna run (not necessarily major thing, I could probably make it not do this, but I cba'd figuring out how to)
            - PS: this means each time you run you gotta wait 01m 15s just for building -- then you gotta wait for MC to launch on top of that
         + uses Forge internally anyway
         + more complicated setup (needs dev tools, whereas with Forge, can just distribute the mod jar file or whatever)
         Though NB: using Forge would mean I gotta do it in Java whereas with Malmo I could use Python
         Oh well let's try out some good ol Java

Minecraft modding:
Considered both Fabric and Forge
Fabric seems cool + more lightweight apparently so it seems better for my use case in that regard (since I'm not making a full on mod [adding stuff to the game, etc])
but honestly I just need some way to interact with MC's internal data structures like position, world stuff, etc and both seem to have an almost identical API for that (from what I have briefly seen)
Forge looks like it has better documentation and stuff and since this is my first MC mod, I'll just go with that I think

Forge first impressions:
Code snippets and stuff I see on forums and stuff online when searching up how to do stuff always seem to be outdated -- it seems the Forge API has changed quite a bit. But oh well, I'll figure it out (i'm not making a full blown mod and just need input control and stuff like that anyway).
The `gradle runClient` thingy is great -- compilation time is really fast compared to Malmo (though loading up Minecraft itself still takes a while). If I run that thing with my IDE, looks like I can view the console output and all.
`gradle runClient` seems to require internet to run though but whatever (otherwise will hang on "0% CONFIGURING")
NB: decided to use Minecraft 1.15.1 -- simply because it's the latest one, bar the 1.16 Nether update one (cause idk much about the new Nether stuff). In fact, I haven't played MC in ages so I haven't kept up with all the new additions anyway but we'll see eh

MC "Flat" spawn coords: 88 4 -183

Bot structure plan:
Make an 'Unit' class. The bot's logic will consist of several different Units.
E.g: a unit for gathering wood from trees
Each unit may have different sub units too -- e.g: a Unit for locating a tree (walking around), another for breaking the blocks
    at a very low level, maybe even a Unit that is simply to move towards a certain coordinate, or rotate some amount
There will be a high level behaviour planner above everything which orchestrates which units to activate/deactivate and when (maybe this is also just a `Unit` as well of some sort (with sub-units, which make up everything else))
NB: units for surveying as well - e.g: looking out for mobs, looking out for furnace finished, etc
Important: the units should all be able to communicate to each other (send event messages to each other, onto a central event bus). E.g: looking out for mobs unit sends a message on the bus
Parent units should be able to stop children units. E.g: behaviour planner unit should halt cutting tree if mob survey unit raises a warning
units should also all be able to access each other's details. E.g: any unit can find out: if a movement unit is active, movement target was ...
Maybe there should be a wide bottom unit for movement (can only have a single bottom movement unit) / MovementPlanner unit
Also: Units should be able to take parameters when starting them (e.g: movement target, type of block to find)

Actually: maybe don't even need central bus -> events can just propagate upwards only (from children to parents) then parents could then push down as see fit


Unit attributes:
Methods:
Start (with params)
Events:
Failed
Done/Succeeded
custom events: onMobDetected, whatever, ...
Info:
params, etc

later (abstraction/helper methods):
methods for internal use: Each Unit can be like do sub-units A, then B, then C (but more complex like FSM) but if break chain then do ...