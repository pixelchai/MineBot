Minecraft options:
- MineRL -- though the action space needs to be extended (crafting, etc)
- Malmo -- what MineRL is built on
- Minecraft mod of some sort (most likely Forge)
Other options which were discarded:
- Recreate minecraft -- too many details to create (Ender dragon etc)
- Analyse MC frame by frame -- although recreating the scene in 3D from screenshots and carrying out other related computer vision tasks would be interesting, it would likely end up becoming the focus of the project + taking up most of the time rather than beating the game. Maybe I could look into stuff like this as a separate project in the future

Decision after trying out the above options:
- MineRL: Uses malmo internally so probably would be better to use malmo directly rather than extending MineRL
          + does some other weird stuff like resizing the screen
          + builds every time like Malmo
- Malmo: Don't really like the vibe -- with the whole XML + client/server thing
         + rebuilds every time you wanna run (not necessarily major thing, I could probably make it not do this, but I cba'd figuring out how to)
            - PS: this means each time you run you gotta wait 01m 15s just for building -- then you gotta wait for MC to launch on top of that
         + uses Forge internally anyway
         + more complicated setup (needs dev tools, whereas with Forge, can just distribute the mod jar file or whatever)
         Though NB: using Forge would mean I gotta do it in Java whereas with Malmo I could use Python
         Oh well let's try out some good ol Java

Minecraft modding:
Considered both Fabric and Forge
Fabric seems cool + more lightweight apparently so it seems better for my use case in that regard (since I'm not making a full on mod [adding stuff to the game, etc])
but honestly I just need some way to interact with MC's internal data structures like position, world stuff, etc and both seem to have an almost identical API for that (from what I have briefly seen)
Forge looks like it has better documentation and stuff and since this is my first MC mod, I'll just go with that I think

Forge first impressions:
Code snippets and stuff I see on forums and stuff online when searching up how to do stuff always seem to be outdated -- it seems the Forge API has changed quite a bit. But oh well, I'll figure it out (i'm not making a full blown mod and just need input control and stuff like that anyway).
The `gradle runClient` thingy is great -- compilation time is really fast compared to Malmo (though loading up Minecraft itself still takes a while). If I run that thing with my IDE, looks like I can view the console output and all.
`gradle runClient` seems to require internet to run though but whatever (otherwise will hang on "0% CONFIGURING")
NB: decided to use Minecraft 1.15.1 -- simply because it's the latest one, bar the 1.16 Nether update one (cause idk much about the new Nether stuff). In fact, I haven't played MC in ages so I haven't kept up with all the new additions anyway but we'll see eh

MC "Flat" spawn coords: 88 4 -183

Bot structure plan:
Make an 'Unit' class. The bot's logic will consist of several different Units.
E.g: a unit for gathering wood from trees
Each unit may have different sub units too -- e.g: a Unit for locating a tree (walking around), another for breaking the blocks
    at a very low level, maybe even a Unit that is simply to move towards a certain coordinate, or rotate some amount
There will be a high level behaviour planner above everything which orchestrates which units to activate/deactivate and when (maybe this is also just a `Unit` as well of some sort (with sub-units, which make up everything else))
NB: units for surveying as well - e.g: looking out for mobs, looking out for furnace finished, etc
Important: the units should all be able to communicate to each other (send event messages to each other, onto a central event bus). E.g: looking out for mobs unit sends a message on the bus
Parent units should be able to stop children units. E.g: behaviour planner unit should halt cutting tree if mob survey unit raises a warning
units should also all be able to access each other's details. E.g: any unit can find out: if a movement unit is active, movement target was ...
Maybe there should be a wide bottom unit for movement (can only have a single bottom movement unit) / MovementPlanner unit
Also: Units should be able to take parameters when starting them (e.g: movement target, type of block to find)

Actually: maybe don't even need central bus -> events can just propagate upwards only (from children to parents) then parents could then push down as see fit


Unit attributes:
Methods:
Start (with params)
Events:
Failed
Done/Succeeded
custom events: onMobDetected, whatever, ...
Info:
params, etc

later (abstraction/helper methods):
methods for internal use: Each Unit can be like do sub-units A, then B, then C (but more complex like FSM) but if break chain then do ...

Thinking more deeply about the structure of the AI. Discovered behaviour trees, however, there are some parts I'm not really sure about
stuff about the 'running' state + how to do stuff which might take multiple ticks to do (walking towards a location)
+ more importantly, when doing an action which may take multiple ticks to do, how can you interrupt them if required
What I've read so far have suggested: when you reach a leaf node that results in 'running', on the subsequent ticks, that leaf node is ticked again and so on until it eventually results in failure/success.
>> "If it returns Running it will be reprocessed next tick, and again and again until it returns a Success or Failure" https://www.gamasutra.com/blogs/ChrisSimpson/20140717/221339/Behavior_trees_for_AI_How_they_work.php
But what if there is a leaf node in 'running' but immediate action is required (mob nearby).
Maybe you should tick the entire tree again, even while another process is running... but how would that work?
Maybe two trees, one is like an 'interrupt' tree, and another is the normal tree ?? Again, what would this look like in practice and how would it function.
Need to solidify these edge cases
That two tree idea seems like a shout though.
Alternatively: maybe I could go with my idea from yesterday -- that idea has more continuity between ticks (whereas with behaviour trees, much of the tree is re-evaluated each tick)
Maybe research some sort of parallel selector (behaviour trees)

Interesting idea with stacks (pushing, popping, and variables): https://www.gamasutra.com/blogs/ChrisSimpson/20140717/221339/Behavior_trees_for_AI_How_they_work.php

Or just have it so that when a node is running, it doesn't propgate right to the TOP of the tree, but it propagates to the top LAYER of the main tree, then only the top layer or so is run each tick
-> can also just think of this as trees themselves nested

Idea: Selectors!
Consider we want to make it so that Units A, B, C should be done one after each other (like 'Sequence' Composite Node in Behaviour Trees)
We can simply just wire up the events like (pseudocode):

def start:
    A.onSuccess(()=> B.start())
    A.onFail(()=> self.finishedFailed())
    B.onSuccess(()=> C.start())
    B.onFail(()=> self.finishedFailed())
    C.onSuccess(()=>  self.finishedSuccessfully())
    C.onFail(()=> self.finishedFailed())

    A.start()

    We can create a construct that automatically wires up the events like this for us, called a 'Selector'. In this case, a SequenceSelector/SequentialSelector

Now, addressing interruptability, we can create a different Selector -- 'Interupter' (or whatever)
Rather than taking a list of children Units, it takes a fixed amount of 3 -- and each are special. NB: example names -- think of better terminology later:
pollUnit = unit to poll all the time. E.g: look out for Mobs -- finishes with FAILED if mobs otherwise finishes with SUCCESS
mainUnit = unit that you do stuff on, but should interrupt if pollUnit finishes with FAILED
responseUnit = unit that should start in response to pollUnit finishing with FAILED
Now, 'Interrupter' would be like:

def start:
    mainUnit.onSuccess => self.finishedSuccessfully()
    mainUnit.onFail => self.finishedFailed()
    pollUnit.onFail => {
        mainUnit.interrupt()
        responseUnit.start()
    }

    pollUnit.start()
    mainUnit.start()

Just thought: may be simpler way of doing this -- just do a selector which finishes with FAIL immediately if any of the two children FAIL, but runs them both concurrently
maybe this is similar 'Parallel' composite Node in Behaviour Trees is like

def start:
    mainUnit.onSuccess => self.finishedSuccessfully()
    mainUnit.onFail => self.finishedFailed()
    pollUnit.onFail => {
        mainUnit.interrupt()
    }

Actually, decided against the above because: although it is similar to the 'Interrupter' structure as described above, it is not quite.
Consider the return values for both.
Interrupter: returns SUCCESS if mainUnit succeeded uninterrupted
             returns FAIL if mainUnit failed or responseUnit failed
             returns FAIL if responseUnit succeeded too (make sure it did run though) <-- NB remember this
Alt: returns SUCCESS if mainUnit succeeded uninterrupted
     returns FAIL if pollUnit raised alarm or if mainUnit failed

Interrupter return value interpretation: cool we know if we need to try again or not
Alt return value interpretation: if fail, EITHER mainUnit failed & we need to try again, or we need to begin attacking nearby mob (e.g). Unclear!

Actually, I think there should be 3 finish states now: SUCCESS, FAILURE, INTERRUPTION
in this case, actually alt would be better, as long as it behaved the following way:

Alt: returns SUCCESS if mainUnit succeeded uninterrupted
     returns FAILURE if mainUnit failed
     returns INTERRUPTED if pollUnit raises alarm

Summary of my AI structure:
it's very event driven, but the sub-structures are *inspired* by Behaviour Trees
it is intrinsically different because the tree should be propagated from the top very rarely (in fact, ideally, it should only be propagated from the top *once*)
there is no RUNNING state -- and in fact, everything is async -- never synchronously wait for another Unit (instead, use events)
address interruption using the constructs discussed above

Side note: I feel like this models human behaviour process a bit better too.
It's not like humans think Oh, I want to be a swag Mathematician, I want to get into a good uni, I want to do maths problems to study, I want to write on this paper every second
No -- they're usually like.. right, I want to be a swag Mathematician, I want to get into a good uni, I want to do maths problems
Then for a while, they just think: Right, I'm doing maths problems right now, I want to write on this paper (without thinking about the long term planning as much for a while)
if that makes sense

plus it makes sense from a computation overhead sort of way
I have heard of 'Event-driven behaviour trees' so maybe this is already a thing, but I couldn't really find any resources about them.
Well my idea is event driven and is (pretty much) a behaviour tree -- so I guess it is an event-driven behaviour tree :)
In fact I could only just about find some decent _normal_ behaviour tree resources (yet an infinite amount of basic 'introduction' videos to GameEngine/Unity behaviour trees)

PS: could only find one implementation of Event-driven behaviour trees later, which was: https://github.com/meniku/NPBehave
It seems similar that it doesn't have a 'running' state, but haven't looked at much else


NB: naming system change -- events are now adjectives:
failure, successful, interrupted, unsuccessful
reason: If I were to make them all nouns, "unsuccessful" doesn't really have a noun parallel that is distinct from "failure"
NB: unsuccessful is a helper event: fires if finishes with either interrupted OR failure (i.e: logical NOT of successful)

also another two helper events just cause I can:
started -- fires right after the Unit is started
done -- fires when

NB: Sequence: don't need to hook children's onInterrupted -> this::interrupt because calling seq.interrupt() will fire interrupt event anyway
Wait? but what if a child is interrupted?... and wants to propagate the interrupt upwards
Ok well I guess if child interrupted => fail Seq. Or just child.onUnsuccessful -> fail self

Planned out alt notation for AI structure -- see notebook!
Make a Utils static class (kind of like logger) to genrate debug overlay diagrams for this
overlay.log(something happened)

Then overlay is just like a game loop:
overlay.update() // update graphics
overlay.render(Screen screen) // render to screen (or whatever)

actually may be easier to have a method: Unit.toJson() or something which recursively generates a Json for the graph
then call .toJson on root Unit, export this to a file, alongside a log of which ones are firing
and outsource debug visuals to a separate program (Python or whatever)
Python could in turn use that one visualisation library that I forgot the name of (Remembered: graphviz. Could produce .dot file)
+ then visuals would be in separate window too, rather than overlay (could be useful if want to zoom in, etc, esp for larger trees)
Actually maybe I could just have Java produce .dot file every frame and make a .dot viewer (which updates as file overwritten) - may not be feasible though (time to generate/render .dot graph may be too long to be realtime)

Visualisation should be thought about later though. Functionality should come first

Problem:
InterruptPoller loop problem (see notebook)
sol maybe: fix by clearing internal hooks onDone

Problem:
Parent
    0 -> Child
    2 -> Child.2
Child:
    2 -> Parent.2

move childrenUnits into Unit base class
and use setChildren() to add to it instead
SingularUnit subclass on top of this which only allows for one child